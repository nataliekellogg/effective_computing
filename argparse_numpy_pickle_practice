"""
OCEAN506 Effective Computing code practice

Unimaginative code for using argparse, making arrays, 
trying methods, and saving output as a pickle file. 
"""
# imports
import sys, os
import numpy as np
import pickle

# determine file
filename = sys.argv[1]

#open file for writing
outfile = open(filename,'wb')

## make arrays
aa = np.random.random((4, 4))
bb = np.random.random((4, 4))

#reshape arrays
arraa = np.array(aa.reshape((2,8))
arrbb = np.array(bb.reshape((8,2))

#print arrays
print ("Array aa:", arraa)
print ("Array bb:", arrbb)
 
##Find out attributes of array aa 

#type of object
print ("Array type:", type(arra))
#number of axes
print ("Number of axes:", arra.ndim)
#shape of array
print("Shape:", arra.shape)
#total number of elements
print ("Total number of elements:", arra.size)


## Some extra methods to try out 

#concatenate arrays
print('Concatenate arrays aa and bb',np.concatenate((arraa,arrbb), axis=1))

#maximum along a given axis
print ("Maximum of axis 1:", np.amax(arraa, axis=1)

#minimum along a given axis
print ("Minimum of axis 1:", np.amin(arraa, axis=1)

#standard deviation of the array elements along given axis
print ("Standard deviation of axis 1:", np.std(arraa, axis=1)


#make pickle file of array aa
pickle.dump(arraa,outfile)

#load pickle file back
infile = open(filename,'rb')
new_arraa = pickle.load(infile)


#What does the array look like now 
print("Shape:", new_arra.shape)



sys.path.append(os.path.abspath('shared'))


myplace = 'arg_numpy_practice'


# make sure the output directory exists
out_dir = '../' + myplace + '_output/'
mymod.make_dir(out_dir)

# define the input filename
in_fn = in_dir + '2017-01-0118.ctd'
# this is some Canadian CTD data, formatted in a strict but
# difficult-to-use way

# define the output filenames
out_fn_1 = out_dir + 'out_test_1.png'
out_fn_2 = out_dir + 'out_test_2.png'



#import
import sys, os
import numpy as np
import pickle
sys.path.append(os.path.abspath('../shared'))
#import my_module as mymod
#from importlib import reload
#reload(mymod)

# make sure the output directory exists
this_dir = os.path.abspath('.').split('/')[-1]
this_parent = os.path.abspath('.').split('/')[-2]
out_dir = '../../' + this_parent + '_output/'
print('Creating ' + out_dir + ', if needed')
#mymod.make_dir(out_dir)

# make an array
arr = np.random.random((5, 5))

# save it as a pickle file
out_fn = out_dir + 'pickled_array.p'
pickle.dump(arr, open(out_fn, 'wb')) # 'wb' is for write binary

# read the array back in
b = pickle.load(open(out_fn, 'rb')) # 'rb is for read binary

print('\nThe shape of the loaded object is')
print(b.shape)

# we could use pickle to save any python object, including a list
# or a dict of other objects

# Question: how much space does a pickle file with 10000 floating point
# numbers take up on your disk?  What does this tell you about how big
# each number is (how many bytes? how many bits?)
